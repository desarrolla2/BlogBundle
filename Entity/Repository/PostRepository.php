<?php

namespace Desarrolla2\Bundle\BlogBundle\Entity\Repository;

use \Doctrine\ORM\EntityRepository;
use \Desarrolla2\Bundle\BlogBundle\Entity\Post;
use \Desarrolla2\Bundle\BlogBundle\Entity\Tag;
use Desarrolla2\Bundle\BlogBundle\Model\PostStatus;
use \DateTime;
use Doctrine\ORM\Query;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{

    const POST_PER_PAGE = 6;

    /**
     * @param  array                       $ids
     * @return \Doctrine\ORM\AbstractQuery
     */
    public function getQueryForGetByIds(array $ids)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            ' SELECT p FROM BlogBundle:Post p ' .
            ' WHERE p.id IN (:ids) ' .
            ' AND p.status = ' . PostStatus::PUBLISHED
        )
            ->setParameter('ids', $ids);

        return $query;
    }

    /**
     * @param  array $ids
     * @return array
     */
    public function getByIds(array $ids)
    {
        return $this->getQueryForGetByIds($ids)
            ->getResult();
    }

    /**
     *
     * @param  string                                     $slug
     * @return \Desarrolla2\Bundle\BlogBundle\Entity\Post
     */
    public function getOneBySlug($slug)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            ' SELECT p FROM BlogBundle:Post p ' .
            ' WHERE p.slug = :slug ' .
            ' ORDER BY p.publishedAt DESC '
        )
            ->setParameter('slug', $slug);

        return $query->getOneOrNullResult();
    }

    /**
     *
     * @param  \Desarrolla2\Bundle\BlogBundle\Entity\Tag $tag
     * @param  int                                       $limit
     * @return \Doctrine\ORM\Query
     */
    public function getByTag(Tag $tag, $limit = self::POST_PER_PAGE)
    {
        $limit = (int) $limit;
        $query = $this->getQueryForGetByTag($tag, $limit)
            ->setMaxResults($limit);

        return $query->getResult();
    }

    /**
     *
     * @param  int   $limit
     * @return array
     */
    public function get($limit = self::POST_PER_PAGE)
    {
        $limit = (int) $limit;
        $query = $this->getQueryForGet($limit)
            ->setMaxResults($limit);

        return $query->getResult();
    }

    /**
     *
     * @return \Doctrine\ORM\Query
     */
    public function getQueryForGet()
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            ' SELECT p FROM BlogBundle:Post p ' .
            ' WHERE p.status = ' . PostStatus::PUBLISHED .
            ' ORDER BY p.publishedAt DESC '
        );

        return $query;
    }

    /**
     *
     * @param  string $slug
     * @return array
     */
    public function getByTagSlug($slug = '')
    {
        $query = $this->getQueryForGetByTagSlug($slug);

        return $query->getResult();
    }

    /**
     *
     * @param  \Desarrolla2\Bundle\BlogBundle\Entity\Tag $tag
     * @return \Doctrine\ORM\Query
     */
    public function getQueryForGetByTag(Tag $tag)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            ' SELECT p FROM BlogBundle:Post p ' .
            ' JOIN p.tags t ' .
            ' WHERE p.status = ' . PostStatus::PUBLISHED .
            ' AND t.slug  = :slug ' .
            ' ORDER BY p.publishedAt DESC '
        )
            ->setParameter('slug', $tag->getSlug());

        return $query;
    }

    /**
     *
     * @param  string              $slug
     * @return \Doctrine\ORM\Query
     */
    public function getQueryForGetByTagSlug($slug = '')
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            ' SELECT p FROM BlogBundle:Post p ' .
            ' JOIN p.tags t ' .
            ' WHERE p.status = ' . PostStatus::PUBLISHED .
            ' AND t.slug = :slug ' .
            ' ORDER BY p.publishedAt DESC '
        )
            ->setParameter('slug', $slug);

        return $query;
    }

    /**
     *
     * @param  \Desarrolla2\Bundle\BlogBundle\Entity\Post $post
     * @param  int                                        $limit
     * @return array
     */
    public function getLatestRelated(Post $post, $limit = self::POST_PER_PAGE)
    {
        $limit = (int) $limit;
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            ' SELECT p FROM BlogBundle:Post p ' .
            ' JOIN p.tags t ' .
            ' JOIN t.posts p1 ' .
            ' WHERE p.status = ' . PostStatus::PUBLISHED .
            ' AND p1 = :post ' .
            ' AND p != :post ' .
            ' ORDER BY p.publishedAt DESC '
        )
            ->setParameter('post', $post)
            ->setMaxResults($limit);
        $related = $query->getResult();
        if (count($related)) {
            return $related;
        } else {
            return $query->getLatest($limit);
        }
    }

    /**
     *
     * @param  int   $limit
     * @return array
     */
    public function getLatest($limit = self::POST_PER_PAGE)
    {
        $limit = (int) $limit;

        return $this->get($limit);
    }

    /**
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getQueryBuilderForFilter()
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb
            ->select('p')
            ->from('BlogBundle:Post', 'p')
            ->orderBy('p.updatedAt', 'DESC');
        $query = $qb->getQuery();

        return $qb;
    }

    /**
     *
     * @return int
     */
    public function count()
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            ' SELECT COUNT(p) FROM BlogBundle:Post p '
        );

        return $query->getSingleScalarResult();
    }

    /**
     *
     * @return int
     */
    public function countPublished()
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            ' SELECT COUNT(p) FROM BlogBundle:Post p ' .
            ' WHERE p.status = ' . PostStatus::PUBLISHED
        );

        return $query->getSingleScalarResult();
    }

    /**
     *
     * @param  int   $limit
     * @return array
     */
    public function getUnPublished($limit = 50)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            ' SELECT p FROM BlogBundle:Post p ' .
            ' WHERE p.status != ' . PostStatus::PUBLISHED .
            ' ORDER BY p.createdAt DESC '
        )
            ->setMaxResults($limit);

        return $query->getResult();
    }

    /**
     * Count published elements from date
     *
     * @param  DateTime $date
     * @return int
     */
    public function countFromDate(DateTime $date)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            ' SELECT COUNT(p) FROM BlogBundle:Post p ' .
            ' WHERE p.status = ' . PostStatus::PUBLISHED .
            ' AND p.createdAt >= :date '
        )
            ->setParameter('date', $date);

        return $query->getSingleScalarResult();
    }

    /**
     *
     * @param  int   $limit
     * @return array
     */
    public function getPrePublished($limit = 50)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            ' SELECT p FROM BlogBundle:Post p ' .
            ' WHERE p.status = ' . PostStatus::PRE_PUBLISHED .
            ' ORDER BY p.createdAt DESC '
        )
            ->setMaxResults($limit);

        return $query->getResult();
    }

    /**
     * @return bool|mixed
     */
    public function getOneRandomPrePublished()
    {
        $items = $this->getPrePublished();
        if ($items) {
            shuffle($items);

            return array_pop($items);
        }

        return false;
    }

    public function getSearchBuilder($query, $page = 1, $perPage = 10)
    {
        $tokens = $this->tokenize($query);
        if (!count($tokens)) {
            return array();
        }

        $name = array();
        $intro = array();
        $content = array();

        $qb = $this->createQueryBuilder('p');
        $qb->where('p.status = 1');

        foreach ($tokens as $token) {
            $tkn = $qb->expr()->literal(sprintf('%%%s%%', $token));
            $name[] = $qb->expr()->like('p.name', $tkn);
            $intro[] = $qb->expr()->like('p.intro', $tkn);
            $content[] = $qb->expr()->like('p.content', $tkn);
        }

        if (count($name) === 1) {
            $qb->andWhere($qb->expr()->orX(
                call_user_func_array(array($qb->expr(), 'orX'), $name),
                call_user_func_array(array($qb->expr(), 'orX'), $intro),
                call_user_func_array(array($qb->expr(), 'orX'), $content)
            ));
        } else {
            $qb->andWhere($qb->expr()->andX(
                call_user_func_array(array($qb->expr(), 'orX'), $name),
                call_user_func_array(array($qb->expr(), 'orX'), $intro),
                call_user_func_array(array($qb->expr(), 'orX'), $content)
            ));
        }

        $start = ($page - 1) * $perPage;

        $qb->setFirstResult($start);
        $qb->setMaxResults($perPage);

        return $qb;
    }

    public function search($query, $page = 1, $perPage = 10)
    {
        return $this->getQueryForSearch($query, $page, $perPage)->getQuery()->getResult();
    }

    /**
     * Tokenize string for searching.
     * This should return all the numbers from
     *
     * @param string $query
     * @return string[]
     */
    protected function tokenize($query)
    {
        preg_match_all('#\b\w{3,}\b#mi', $query, $matches);
        return is_array($matches) && count($matches)
            ? $matches[0]
            : array();
    }
}
